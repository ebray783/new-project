import{a_ as w,a$ as y,b0 as p,b1 as b,b2 as g,b3 as L,b4 as E,b5 as O,b6 as x,b7 as R,b8 as M,b9 as m,ba as $}from"./index-b0cab403.js";function S(r,a){if(!w(r,{strict:!1}))throw new y({address:r});if(!w(a,{strict:!1}))throw new y({address:a});return r.toLowerCase()===a.toLowerCase()}class q extends p{constructor({callbackSelector:a,cause:t,data:c,extraData:i,sender:f,urls:s}){var n;super(t.shortMessage||"An error occurred while fetching for an offchain result.",{cause:t,metaMessages:[...t.metaMessages||[],(n=t.metaMessages)!=null&&n.length?"":[],"Offchain Gateway Call:",s&&["  Gateway URL(s):",...s.map(d=>`    ${b(d)}`)],`  Sender: ${f}`,`  Data: ${c}`,`  Callback selector: ${a}`,`  Extra data: ${i}`].flat(),name:"OffchainLookupError"})}}class C extends p{constructor({result:a,url:t}){super("Offchain gateway response is malformed. Response data must be a hex value.",{metaMessages:[`Gateway URL: ${b(t)}`,`Response: ${g(a)}`],name:"OffchainLookupResponseMalformedError"})}}class A extends p{constructor({sender:a,to:t}){super("Reverted sender address does not match target contract address (`to`).",{metaMessages:[`Contract address: ${t}`,`OffchainLookup sender address: ${a}`],name:"OffchainLookupSenderMismatchError"})}}const P="0x556f1830",T={name:"OffchainLookup",type:"error",inputs:[{name:"sender",type:"address"},{name:"urls",type:"string[]"},{name:"callData",type:"bytes"},{name:"callbackFunction",type:"bytes4"},{name:"extraData",type:"bytes"}]};async function U(r,{blockNumber:a,blockTag:t,data:c,to:i}){const{args:f}=L({data:c,abi:[T]}),[s,n,d,l,o]=f,{ccipRead:e}=r,h=e&&typeof(e==null?void 0:e.request)=="function"?e.request:G;try{if(!S(i,s))throw new A({sender:s,to:i});const u=n.includes(E)?await O({data:d,ccipRequest:h}):await h({data:d,sender:s,urls:n}),{data:k}=await x(r,{blockNumber:a,blockTag:t,data:R([l,M([{type:"bytes"},{type:"bytes"}],[u,o])]),to:i});return k}catch(u){throw new q({callbackSelector:l,cause:u,data:c,extraData:o,sender:s,urls:n})}}async function G({data:r,sender:a,urls:t}){var i;let c=new Error("An unknown error occurred.");for(let f=0;f<t.length;f++){const s=t[f],n=s.includes("{data}")?"GET":"POST",d=n==="POST"?{data:r,sender:a}:void 0,l=n==="POST"?{"Content-Type":"application/json"}:{};try{const o=await fetch(s.replace("{sender}",a.toLowerCase()).replace("{data}",r),{body:JSON.stringify(d),headers:l,method:n});let e;if((i=o.headers.get("Content-Type"))!=null&&i.startsWith("application/json")?e=(await o.json()).data:e=await o.text(),!o.ok){c=new m({body:d,details:e!=null&&e.error?g(e.error):o.statusText,headers:o.headers,status:o.status,url:s});continue}if(!$(e)){c=new C({result:e,url:s});continue}return e}catch(o){c=new m({body:d,details:o.message,url:s})}}throw c}export{G as ccipRequest,U as offchainLookup,T as offchainLookupAbiItem,P as offchainLookupSignature};
